<!-- jQuery -->
<script src="~/Content/Admin LTE 3.2/plugins/jquery/jquery.min.js"></script>
<!-- jQuery UI 1.11.4 -->
<script src="~/Content/Admin LTE 3.2/plugins/jquery-ui/jquery-ui.min.js"></script>

<!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
<script>
    $.widget.bridge('uibutton', $.ui.button)
</script>
<!-- Bootstrap 4 -->
<script src="~/Content/Admin LTE 3.2/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- ChartJS -->
<script src="~/Content/Admin LTE 3.2/plugins/chart.js/Chart.min.js"></script>
<!-- Sparkline -->
@*<script src="~/Content/Admin LTE 3.2/plugins/sparklines/sparkline.js"></script>*@
<!-- JQVMap -->
<script src="~/Content/Admin LTE 3.2/plugins/jqvmap/jquery.vmap.min.js"></script>
<script src="~/Content/Admin LTE 3.2/plugins/jqvmap/maps/jquery.vmap.usa.js"></script>
<!-- jQuery Knob Chart -->
<script src="~/Content/Admin LTE 3.2/plugins/jquery-knob/jquery.knob.min.js"></script>
<!-- daterangepicker -->
<script src="~/Content/Admin LTE 3.2/plugins/moment/moment.min.js"></script>
<script src="~/Content/Admin LTE 3.2/plugins/daterangepicker/daterangepicker.js"></script>
<!-- Tempusdominus Bootstrap 4 -->
<script src="~/Content/Admin LTE 3.2/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
<!-- Summernote -->
<script src="~/Content/Admin LTE 3.2/plugins/summernote/summernote-bs4.min.js"></script>
<!-- overlayScrollbars -->
<script src="~/Content/Admin LTE 3.2/plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>
<!-- AdminLTE App -->
<script src="~/Content/Admin LTE 3.2/dist/js/adminlte.js"></script>
<!-- AdminLTE for demo purposes -->
@*<script src="~/Content/Admin LTE 3.2/dist/js/demo.js"></script>*@
<!-- AdminLTE dashboard demo (This is only for demo purposes) -->
@*<script src="~/Content/Admin LTE 3.2/dist/js/pages/dashboard.js"></script>*@

<script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.12.1/js/dataTables.bootstrap4.min.js"></script>

<!--DEVEXTREME-->
<script src="~/Scripts/DevExtreme/21.1.5/dx.all.js"></script>
<script src="~/Scripts/DevExtreme/21.1.5/localization/dx.messages.es.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>

<!--TOAST-->
<script src="~/Content/toast/js/jquery.toast.min.js"></script>

<!--AIR-->
<script src="~/Content/air-datepicker-3/dist/air-datepicker.js"></script>

<!--ALERTIFY-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/AlertifyJS/1.13.1/alertify.min.js" integrity="sha512-JnjG+Wt53GspUQXQhc+c4j8SBERsgJAoHeehagKHlxQN+MtCCmFDghX9/AcbkkNRZptyZU4zC8utK59M5L45Iw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.1.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.2/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.0.0/jspdf.umd.min.js"></script>

<script>
    $(function () {
        $('.my-colorpicker2').on('colorpickerChange', function (event) {
            $('.my-colorpicker2 .fa-square').css('color', event.color.toString());
        })

        $("input[data-bootstrap-switch]").each(function () {
            $(this).bootstrapSwitch('state', $(this).prop('checked'));
        })

    })
    function ShowAlertMessage(icon, descripcion) {
        /*
        Swal.fire({
            icon: icon,
            html: descripcion,
            showCancelButton: true,
            cancelButtonText: 'Cerrar',
            showConfirmButton: false,
        })
        */
        /*
        $.toast({
            text: descripcion,
            textAlign: 'center',
            position: 'bottom-center',
            showHideTransition: 'slide', // fade, slide or plain
            loader: false,  // Whether to show loader or not. True by default
            loaderBg: '##CB4335',  // Background color of the toast loader
            hideAfter: 2500, // false to make it sticky or number representing the miliseconds as time after which toast needs to be hidden
        })
        */

        Swal.fire({
            icon: icon,
            html: descripcion,
            showCancelButton: true,
            cancelButtonText: 'Cerrar',
            showConfirmButton: false,
        })
        /*
        alertify.set('notifier', 'position', 'top-center');
        if (icon == 'success')
            alertify.success(descripcion, 'position')
        else
            alertify.error(descripcion, 'position');
            */
    }

    function formatNumber(num) {
        return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')
    }

    function valideKey(evt) {
        // code is the decimal ASCII representation of the pressed key.
        var code = (evt.which) ? evt.which : evt.keyCode;
        if (code == 8) { // backspace.
            return true;
        } else if (code >= 48 && code <= 57) { // is a number.
            return true;
        } else { // other keys.
            return false;
        }
    }

    function CallToast(text, loader, timer, color) {
        $.toast({
            text: text,
            icon: 'success', // Type of toast icon
            showHideTransition: 'slide', // fade, slide or plain
            allowToastClose: false, // Boolean value true or false
            hideAfter: timer, // false to make it sticky or number representing the miliseconds as time after which toast needs to be hidden
            stack: false, // false if there should be only one toast at a time or a number representing the maximum number of toasts to be shown at a time
            position: 'bottom-center', // bottom-left or bottom-right or bottom-center or top-left or top-right or top-center or mid-center or an object representing the left, right, top, bottom values
            textAlign: 'center',  // Text alignment i.e. left, right or center
            loader: loader,  // Whether to show loader or not. True by default
            loaderBg: color,  // Background color of the toast loader
        });
        /*
        $.toast({
            text: text,
            textAlign: 'center',
            position: 'bottom-center',
            showHideTransition: 'slide', // fade, slide or plain
            loader: loader,  // Whether to show loader or not. True by default
            loaderBg: color,  // Background color of the toast loader
            hideAfter: timer, // false to make it sticky or number representing the miliseconds as time after which toast needs to be hidden
        })
        */
    }

</script>


<script>
    function CallLoadingFire(text) {
        $('#divLoading').show();
        if (typeof text === 'undefined') {
            $('.fire-text').html('Cargando...');
        }
        else {
            $('.fire-text').html(text);
        }

        $(document).ajaxStop(function () {
            $('#divLoading').hide();
        });
    }
</script>


<script>
    var timerID = null;
    var timerRunning = false;
    function stopclock() {
        if (timerRunning)
            clearTimeout(timerID);
        timerRunning = false;
    }
    function showtime() {
        $('#lblHora').html(moment().format('h:mm:ss a'));
        timerID = setTimeout("showtime()", 1000);
        timerRunning = true;
    }

    function startclock() {
        stopclock();
        showtime();
    }

    $(document).ready(function () {
        $("input[type=text]").keyup(function () {
            // store current positions in variables
            var start = this.selectionStart,
                end = this.selectionEnd;

            $(this).val($(this).val().toUpperCase());

            // restore from variables...
            this.setSelectionRange(start, end);
        });
    });
</script>

<script>
    function DatePicker(obj, options = null) {
        var air = new AirDatepicker(obj, options);
        return air;
    }

    function DateFormat(date) {
        try {
            let d = date;
            let month = (d.getMonth() + 1).toString().padStart(2, '0');
            let day = d.getDate().toString().padStart(2, '0');
            let year = d.getFullYear();
            return [year, month, day].join('-');
        } catch (err) {
            return '';
        }
    }

    function DatePickerRange(obj, onchange = null) {
        var air = new AirDatepicker(obj, {
            range: true,
            multipleDatesSeparator: ' - ',
            onSelect: onchange
        });
        console.log(air)
        return air;
    }
</script>


